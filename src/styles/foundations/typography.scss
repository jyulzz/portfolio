@use 'styles/utilities/variables' as *;
@use 'styles/utilities/functions';
@use 'styles/foundations/breakpoints';

$xs: (
	'XXS': (
		px-to-rem(2.5 * $f),
		px-to-rem(4 * $f),
		px-to-rem(2 * $f),
	),
	'XS': (
		px-to-rem(3 * $f),
		px-to-rem(4 * $f),
		px-to-rem(2 * $f),
	),
	'S': (
		px-to-rem(3.5 * $f),
		px-to-rem(6 * $f),
		px-to-rem(3 * $f),
	),
	'M': (
		px-to-rem(4 * $f),
		px-to-rem(8 * $f),
		px-to-rem(3 * $f),
	),
	'L': (
		px-to-rem(4 * $f),
		px-to-rem(8 * $f),
		px-to-rem(4 * $f),
	),
	'XL': (
		px-to-rem(6 * $f),
		px-to-rem(10 * $f),
		px-to-rem(4 * $f),
	),
	'XXL': (
		px-to-rem(7 * $f),
		px-to-rem(11 * $f),
		px-to-rem(4 * $f),
	),
	'XXXL': (
		px-to-rem(8.5 * $f),
		px-to-rem(14 * $f),
		px-to-rem(4 * $f),
	),
);
$s: (
	'XXS': (
		px-to-rem(2.5 * $f),
		px-to-rem(4 * $f),
		px-to-rem(2 * $f),
	),
	'XS': (
		px-to-rem(3 * $f),
		px-to-rem(4 * $f),
		px-to-rem(2 * $f),
	),
	'S': (
		px-to-rem(3.5 * $f),
		px-to-rem(6 * $f),
		px-to-rem(3 * $f),
	),
	'M': (
		px-to-rem(4 * $f),
		px-to-rem(8 * $f),
		px-to-rem(3 * $f),
	),
	'L': (
		px-to-rem(4 * $f),
		px-to-rem(8 * $f),
		px-to-rem(4 * $f),
	),
	'XL': (
		px-to-rem(6 * $f),
		px-to-rem(10 * $f),
		px-to-rem(4 * $f),
	),
	'XXL': (
		px-to-rem(7 * $f),
		px-to-rem(11 * $f),
		px-to-rem(4 * $f),
	),
	'XXXL': (
		px-to-rem(8.5 * $f),
		px-to-rem(14 * $f),
		px-to-rem(4 * $f),
	),
);
$m: (
	'XXS': (
		px-to-rem(2.5 * $f),
		px-to-rem(4 * $f),
		px-to-rem(2 * $f),
	),
	'XS': (
		px-to-rem(3 * $f),
		px-to-rem(4 * $f),
		px-to-rem(2 * $f),
	),
	'S': (
		px-to-rem(3.5 * $f),
		px-to-rem(6 * $f),
		px-to-rem(3 * $f),
	),
	'M': (
		px-to-rem(4 * $f),
		px-to-rem(8 * $f),
		px-to-rem(3 * $f),
	),
	'L': (
		px-to-rem(4 * $f),
		px-to-rem(8 * $f),
		px-to-rem(4 * $f),
	),
	'XL': (
		px-to-rem(6 * $f),
		px-to-rem(10 * $f),
		px-to-rem(4 * $f),
	),
	'XXL': (
		px-to-rem(7.5 * $f),
		px-to-rem(12 * $f),
		px-to-rem(4 * $f),
	),
	'XXXL': (
		px-to-rem(8.5 * $f),
		px-to-rem(14 * $f),
		px-to-rem(4 * $f),
	),
);
$l: (
	'XXS': (
		px-to-rem(2.5 * $f),
		px-to-rem(4 * $f),
		px-to-rem(2 * $f),
	),
	'XS': (
		px-to-rem(3 * $f),
		px-to-rem(4 * $f),
		px-to-rem(2 * $f),
	),
	'S': (
		px-to-rem(3.5 * $f),
		px-to-rem(6 * $f),
		px-to-rem(3 * $f),
	),
	'M': (
		px-to-rem(4.5 * $f),
		px-to-rem(9 * $f),
		px-to-rem(4 * $f),
	),
	'L': (
		px-to-rem(5.5 * $f),
		px-to-rem(9 * $f),
		px-to-rem(4 * $f),
	),
	'XL': (
		px-to-rem(6.5 * $f),
		px-to-rem(10 * $f),
		px-to-rem(4 * $f),
	),
	'XXL': (
		px-to-rem(7.5 * $f),
		px-to-rem(12 * $f),
		px-to-rem(4 * $f),
	),
	'XXXL': (
		px-to-rem(10 * $f),
		px-to-rem(15 * $f),
		px-to-rem(4 * $f),
	),
);
$xl: (
	'XXS': (
		px-to-rem(2.5 * $f),
		px-to-rem(4 * $f),
		px-to-rem(2 * $f),
	),
	'XS': (
		px-to-rem(3 * $f),
		px-to-rem(4 * $f),
		px-to-rem(2 * $f),
	),
	'S': (
		px-to-rem(3.5 * $f),
		px-to-rem(6 * $f),
		px-to-rem(3 * $f),
	),
	'M': (
		px-to-rem(4.5 * $f),
		px-to-rem(9 * $f),
		px-to-rem(4 * $f),
	),
	'L': (
		px-to-rem(5.5 * $f),
		px-to-rem(9 * $f),
		px-to-rem(4 * $f),
	),
	'XL': (
		px-to-rem(6.5 * $f),
		px-to-rem(10 * $f),
		px-to-rem(4 * $f),
	),
	'XXL': (
		px-to-rem(8 * $f),
		px-to-rem(13 * $f),
		px-to-rem(4 * $f),
	),
	'XXXL': (
		px-to-rem(10 * $f),
		px-to-rem(15 * $f),
		px-to-rem(4 * $f),
	),
);

$weights: (
	'thin': 				100,
	'extra-light': 	200,
	'light': 				300,
	'normal': 			400,
	'medium': 			500,
	'semibold': 		600,
	'bold': 				700,
	'extra Bold':		800,
	'black':				900,
	'extra-black':	950,
);

// Base function to fetch a font size and line height for a specific text size at a specific breakpoint
@mixin get-font($breakpoint, $size) {
	@if $breakpoint == 'xs' {
		font-size: nth(map-get($xs, $size), 1);
		line-height: nth(map-get($xs, $size), 2);
	}

	@if $breakpoint == 's' {
		font-size: nth(map-get($s, $size), 1);
		line-height: nth(map-get($s, $size), 2);
	}

	@if $breakpoint == 'm' {
		font-size: nth(map-get($m, $size), 1);
		line-height: nth(map-get($m, $size), 2);
	}

	@if $breakpoint == 'l' {
		font-size: nth(map-get($l, $size), 1);
		line-height: nth(map-get($l, $size), 2);
	}

	@if $breakpoint == 'xl' {
		font-size: nth(map-get($xl, $size), 1);
		line-height: nth(map-get($xl, $size), 2);
	}
}

// Base function to fetch a line height for a specific text size at a specific breakpoint
@mixin get-line-height($breakpoint, $size) {
	@if $breakpoint == 'xs' {
		line-height: nth(map-get($xs, $size), 2);
	}

	@if $breakpoint == 's' {
		line-height: nth(map-get($s, $size), 2);
	}

	@if $breakpoint == 'm' {
		line-height: nth(map-get($m, $size), 2);
	}

	@if $breakpoint == 'l' {
		line-height: nth(map-get($l, $size), 2);
	}

	@if $breakpoint == 'xl' {
		line-height: nth(map-get($xl, $size), 2);
	}
}

@function get-p-height($breakpoint, $size) {
	@if $breakpoint == 'xs' {
		@return nth(map-get($xs, $size), 3);
	}

	@if $breakpoint == 's' {
		@return nth(map-get($s, $size), 3);
	}

	@if $breakpoint == 'm' {
		@return nth(map-get($m, $size), 3);
	}

	@if $breakpoint == 'l' {
		@return nth(map-get($l, $size), 3);
	}

	@if $breakpoint == 'xl' {
		@return nth(map-get($xl, $size), 3);
	}
}

// Function used to set a specific font size for each breakpoint
@mixin get-font-scaled($xsFont, $sFont, $mFont, $lFont, $xlFont) {
	@include breakpoints.on('xs') {
		font-size: nth(map-get($xs, $mFont), 1);
		line-height: nth(map-get($xs, $mFont), 2);
	}

	@include breakpoints.on('s') {
		font-size: nth(map-get($s, $mFont), 1);
		line-height: nth(map-get($s, $mFont), 2);
	}

	@include breakpoints.on('m') {
		font-size: nth(map-get($m, $mFont), 1);
		line-height: nth(map-get($m, $mFont), 2);
	}

	@include breakpoints.on('l') {
		font-size: nth(map-get($l, $lFont), 1);
		line-height: nth(map-get($l, $lFont), 2);
	}

	@include breakpoints.up('xl') {
		font-size: nth(map-get($l, $lFont), 1);
		line-height: nth(map-get($l, $lFont), 2);
	}
}

// Function used to a single font size across breakpoints
@mixin get-font-responsive($size) {
	@include breakpoints.on('xs') {
		@include get-font('xs', $size);
	}

	@include breakpoints.on('s') {
		@include get-font('s', $size);
	}

	@include breakpoints.on('m') {
		@include get-font('m', $size);
	}

	@include breakpoints.on('l') {
		@include get-font('l', $size);
	}

	@include breakpoints.up('xl') {
		@include get-font('xl', $size);
	}
}

// Function used to a single line height across breakpoints
@mixin get-line-height-responsive($size) {
	@include breakpoints.on('xs') {
		@include get-line-height('xs', $size);
	}

	@include breakpoints.on('s') {
		@include get-line-height('s', $size);
	}

	@include breakpoints.on('m') {
		@include get-line-height('m', $size);
	}

	@include breakpoints.on('l') {
		@include get-line-height('l', $size);
	}

	@include breakpoints.up('xl') {
		@include get-line-height('xl', $size);
	}
}

@import url('https://fonts.googleapis.com/css?family=IBM+Plex+Sans:Roboto:300,400,500,600,700,300i,400i,500i,600i,700i&display=swap');
@import 'node_modules/@fortawesome/fontawesome-pro/scss/fontawesome.scss';
@import 'node_modules/@fortawesome/fontawesome-pro/scss/regular.scss';
@import 'node_modules/@fortawesome/fontawesome-pro/scss/solid.scss';
@import 'node_modules/@fortawesome/fontawesome-pro/scss/light.scss';

body {
	font-family: 'IBM Plex Sans', Helvetica, sans-serif;

	@include get-font-responsive('S');

	h1,
	h2,
	h3,
	h4,
	h5,
	h6 {
		font-weight: normal;
	}

	h1 {
		@include get-font-responsive('XXXL');

		@include breakpoints.on('xs') {
			margin-bottom: get-p-height('xs', 'XXL');
		}

		@include breakpoints.on('s') {
			margin-bottom: get-p-height('s', 'XXL');
		}

		@include breakpoints.on('m') {
			margin-bottom: get-p-height('m', 'XXL');
		}

		@include breakpoints.on('l') {
			margin-bottom: get-p-height('l', 'XXL');
		}

		@include breakpoints.up('xl') {
			margin-bottom: get-p-height('xl', 'XXL');
		}
	}

	h2 {
		@include get-font-responsive('XXL');

		@include breakpoints.on('xs') {
			margin-bottom: get-p-height('xs', 'XL');
		}

		@include breakpoints.on('s') {
			margin-bottom: get-p-height('s', 'XL');
		}

		@include breakpoints.on('m') {
			margin-bottom: get-p-height('m', 'XL');
		}

		@include breakpoints.on('l') {
			margin-bottom: get-p-height('l', 'XL');
		}

		@include breakpoints.up('xl') {
			margin-bottom: get-p-height('xl', 'XL');
		}
	}

	h3 {
		@include get-font-responsive('XL');

		@include breakpoints.on('xs') {
			margin-bottom: get-p-height('xs', 'M');
		}

		@include breakpoints.on('s') {
			margin-bottom: get-p-height('s', 'M');
		}

		@include breakpoints.on('m') {
			margin-bottom: get-p-height('m', 'M');
		}

		@include breakpoints.on('l') {
			margin-bottom: get-p-height('l', 'M');
		}

		@include breakpoints.up('xl') {
			margin-bottom: get-p-height('xl', 'M');
		}
	}

	h4 {
		@include get-font-responsive('L');

		@include breakpoints.on('xs') {
			margin-bottom: get-p-height('xs', 'M');
		}

		@include breakpoints.on('s') {
			margin-bottom: get-p-height('s', 'M');
		}

		@include breakpoints.on('m') {
			margin-bottom: get-p-height('m', 'M');
		}

		@include breakpoints.on('l') {
			margin-bottom: get-p-height('l', 'M');
		}

		@include breakpoints.up('xl') {
			margin-bottom: get-p-height('xl', 'M');
		}
	}

	h5 {
		@include get-font-responsive('M');

		@include breakpoints.on('xs') {
			margin-bottom: get-p-height('xs', 'S');
		}

		@include breakpoints.on('s') {
			margin-bottom: get-p-height('s', 'S');
		}

		@include breakpoints.on('m') {
			margin-bottom: get-p-height('m', 'S');
		}

		@include breakpoints.on('l') {
			margin-bottom: get-p-height('l', 'S');
		}

		@include breakpoints.up('xl') {
			margin-bottom: get-p-height('xl', 'S');
		}
	}

	h6 {
		@include get-font-responsive('S');

		@include breakpoints.on('xs') {
			margin-bottom: get-p-height('xs', 'XS');
		}

		@include breakpoints.on('s') {
			margin-bottom: get-p-height('s', 'XS');
		}

		@include breakpoints.on('m') {
			margin-bottom: get-p-height('m', 'XS');
		}

		@include breakpoints.on('l') {
			margin-bottom: get-p-height('l', 'XS');
		}

		@include breakpoints.up('xl') {
			margin-bottom: get-p-height('xl', 'XS');
		}
	}

	p {
		@include breakpoints.on('xs') {
			margin-bottom: get-p-height('xs', 'L');
		}

		@include breakpoints.on('s') {
			margin-bottom: get-p-height('s', 'L');
		}

		@include breakpoints.on('m') {
			margin-bottom: get-p-height('m', 'L');
		}

		@include breakpoints.on('l') {
			margin-bottom: get-p-height('l', 'L');
		}

		@include breakpoints.up('xl') {
			margin-bottom: get-p-height('xl', 'L');
		}
	}

	ul li {
		list-style-type: disc;
		list-style-position: inside;

		@include breakpoints.on('xs') {
			margin-left: get-p-height('xs', 'XXL');
		}

		@include breakpoints.on('s') {
			margin-left: get-p-height('s', 'XXL');
		}

		@include breakpoints.on('m') {
			margin-left: get-p-height('m', 'XXL');
		}

		@include breakpoints.on('l') {
			margin-left: get-p-height('l', 'XXL');
		}

		@include breakpoints.up('xl') {
			margin-left: get-p-height('xl', 'XXL');
		}

		&:last-of-type {
			@include breakpoints.on('xs') {
				margin-bottom: get-p-height('xs', 'M');
			}

			@include breakpoints.on('s') {
				margin-bottom: get-p-height('s', 'M');
			}

			@include breakpoints.on('m') {
				margin-bottom: get-p-height('m', 'M');
			}

			@include breakpoints.on('l') {
				margin-bottom: get-p-height('l', 'M');
			}

			@include breakpoints.up('xl') {
				margin-bottom: get-p-height('xl', 'M');
			}
		}

		p {
			display: inline;
		}
	}

	b {
		font-weight: map-get($weights, 'semibold');
	}

	i {
		font-style: italic;
	}

	u {
		text-decoration: underline;
	}
}
